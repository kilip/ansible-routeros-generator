name: capsman_manager
package: capsman
type: setting
template: '@ansible/module/module.py.twig'
module_name: kilip.routeros.ros_capsman_manager
export_command: '/caps-man manager export'
resource_class_name: CapsmanManagerResource
documentation:
  module: ros_capsman_manager
  version_added: 1.0.0
  author: 'Anthonius Munthi (@kilip)'
  short_description: 'CAPsMan Manager Setting Module'
  description:
    - 'This modules manages CAPsMan Maanager Setting on Mikrotik RouterOS network devices'
  options:
    state:
      type: str
      choices:
        - present
        - reset
      default: present
      description: 'Set state for this module'
    config:
      type: dict
      description: 'A dictionary of capsman_manager options'
      suboptions:
        ca_certificate:
          type: str
          description: 'Device CA certificate'
        certificate:
          type: str
          choices:
            - auto
            - 'certificate name'
            - none
          description: 'Device certificate'
        enabled:
          type: bool
          default: 'False'
          description: 'Disable or enable CAPsMAN functionality'
        package_path:
          type: str
          description: |
            Folder location for the RouterOS packages. For example, use "/upgrade" to specify the upgrade folder from the files section. If empty string
            is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the same architecture as CAPsMAN will be upgraded.
        require_peer_certificate:
          type: bool
          default: 'False'
          description: 'Require all connecting CAPs to have a valid certificate'
        upgrade_policy:
          type: str
          choices:
            - none
            - require-same-version
            - suggest-same-upgrade
          description: |
            Upgrade policy options - none - do not perform upgrade
            - require-same-version - CAPsMAN suggest to upgrade the CAP RouterOS version and if it fails it will not provision the CAP. (Manual
            provision is still possible)
            - suggest-same-version - CAPsMAN suggests to upgrade the CAP RouterOS version and if it fails it will still be provisioned
examples:
  - title: 'Using Present State'
    name: 'Update Settings'
    argument_spec:
      state: present
      config:
        ca_certificate: auto
        enabled: 'yes'
    before: |
      /caps-man manager
      set ca-certificate=none certificate=none enabled=no require-peer-certificate=no upgrade-policy=none
    after: |
      # RouterOS Output
      #
      /caps-man manager
      set ca-certificate=auto enabled=yes
    commands:
      - '/caps-man manager set ca-certificate=auto enabled=yes'
resource:
  name: capsman_manager
  package: capsman
  command: '/caps-man manager'
  config_type: setting
  keys:
    - name
  supports:
    - export-verbose-mode
  argument_spec:
    state:
      type: str
      choices:
        - present
        - reset
      default: present
    config:
      type: dict
      options:
        ca_certificate:
          type: str
          description: '(need to be defined later)'
        certificate:
          type: str
          choices:
            - auto
            - 'certificate name'
            - none
          description: '(need to be defined later)'
        enabled:
          type: bool
          default: 'False'
          description: '(need to be defined later)'
        package_path:
          type: str
          description: '(need to be defined later)'
        require_peer_certificate:
          type: bool
          default: 'False'
          description: '(need to be defined later)'
        upgrade_policy:
          type: str
          choices:
            - none
            - require-same-version
            - suggest-same-upgrade
          description: '(need to be defined later)'
tests:
  facts:
    name: capsman_manager
    type: setting
    package: capsman
    fixture_contents: |
      # RouterOS Output
      #
      /caps-man manager
      set ca-certificate=none certificate=none enabled=no require-peer-certificate=no upgrade-policy=none
    fixtures:
      - action: set
        values:
          ca_certificate: none
          certificate: none
          enabled: 'no'
          require_peer_certificate: 'no'
          upgrade_policy: none
  unit:
    name: capsman_manager
    package: capsman
    module_name: ros_capsman_manager
    fixture_contents: |
      # RouterOS Output
      #
      /caps-man manager
      set ca-certificate=none certificate=none enabled=no require-peer-certificate=no upgrade-policy=none
    tests:
      - commands:
          - '/caps-man manager set ca-certificate=auto enabled=yes'
        argument_spec:
          state: present
          config:
            ca_certificate: auto
            enabled: 'yes'
