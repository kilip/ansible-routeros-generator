name: wireless_connect_list
package: interface.wireless
template: '@ansible/module/module.py.twig'
module_name: kilip.routeros.ros_wireless_connect_list
export_command: '/interface wireless connect-list export'
resource_class_name: WirelessConnectListResource
documentation:
  module: ros_wireless_connect_list
  version_added: 1.0.0
  author: 'Anthonius Munthi (@kilip)'
  short_description: 'Wireless Connect List Module'
  description:
    - 'This module manages the Wireless Access List configuration of Mikrotik RouterOS network devices.'
  options:
    state:
      choices:
        - merged
        - replaced
        - overridden
        - deleted
      default: merged
      description: 'Set state for this module'
    config:
      type: list
      elements: dict
      suboptions:
        3gpp:
          type: str
          description: ''
        area_prefix:
          type: str
          description: 'Rule matches if area value of AP (a proprietary extension) begins with specified value.**area** value is a proprietary extension.'
        comment:
          type: str
          required: 'True'
          description: 'Short description of an entry'
        connect:
          type: bool
          default: 'True'
          description: |
            Available options:
            
            - *yes* - Connect to access point that matches this rule.
            - *no* - Do not connect to any access point that matches this rule.
            
        disabled:
          type: bool
          default: 'False'
          description: ''
        interface:
          type: str
          description: 'Each rule in connect list applies only to one wireless interface that is specified by this setting.'
        mac_address:
          type: str
          default: '00:00:00:00:00:00'
          description: 'Rule matches only AP with the specified MAC address. Value *00:00:00:00:00:00* matches always.'
        security_profile:
          type: str
          description: 'Name of [ security profile](#Security_Profiles) that is used when connecting to matching access points, If value of this property is *none*, then security profile specified in the interface configuration will be used. In station mode, rule will match only access points that can support specified security profile. Value *none* will match access point that supports security profile that is specified in the interface configuration. In access point mode value of this property will not be used to match remote devices.'
        signal_range:
          type: str
          default: '-120..120'
          description: 'Rule matches if signal strength of the access point is within the range. If station establishes connection to access point that is matched by this rule, it will disconnect from that access point when signal strength goes out of the specified range.'
        ssid:
          type: str
          description: 'Rule matches access points that have this SSID. Empty value matches any SSID. This property has effect only when station mode interface **ssid** is empty, or when access point mode interface has **wds-ignore-ssid**=*yes*'
        wireless_protocol:
          type: str
          choices:
            - '802.11'
            - any
            - nstreme
            - tdma
          default: any
          description: ''
examples:
  - title: 'Using merged state'
    name: 'Merge device configuration'
    argument_spec:
      config:
        - comment: existing
          interface: wlan1
          signal_range: '-50..120'
          wireless_protocol: 802.11
      state: merged
    before: |
      /interface wireless connect-list
      add comment=existing interface=wlan1 signal-range=-79..120
    after: |
      # RouterOS Output
      #
      /interface wireless connect-list
      add comment=existing interface=wlan1 signal-range=-50..120 wireless-protocol=802.11
    commands:
      - '/interface wireless connect-list set [ find comment=existing ] interface=wlan1 signal-range=-50..120 wireless-protocol=802.11'
resource:
  name: wireless_connect_list
  package: interface.wireless
  command: '/interface wireless connect-list'
  config_type: config
  keys:
    - comment
  argument_spec:
    states:
      type: str
      choices:
        - merged
        - replaced
        - overridden
        - deleted
      default: merged
    config:
      type: list
      elements: dict
      options:
        3gpp:
          type: str
        area_prefix:
          type: str
        comment:
          type: str
          required: 'True'
        connect:
          type: bool
          default: 'True'
        disabled:
          type: bool
          default: 'False'
        interface:
          type: str
        mac_address:
          type: str
          default: '00:00:00:00:00:00'
        security_profile:
          type: str
        signal_range:
          type: str
          default: '-120..120'
        ssid:
          type: str
        wireless_protocol:
          type: str
          choices:
            - '802.11'
            - any
            - nstreme
            - tdma
          default: any
tests:
  facts:
    name: wireless_connect_list
    type: config
    package: interface.wireless
    fixture_contents: |
      # RouterOS Output
      #
      /interface wireless connect-list
      add comment=existing interface=wlan1 signal-range=-79..120
    fixtures:
      - action: add
        values:
          comment: existing
          interface: wlan1
          signal_range: '-79..120'
  unit:
    module_name: ros_wireless_connect_list
    fixture_contents: |
      # RouterOS Output
      #
      /interface wireless connect-list
      add comment=existing interface=wlan1 signal-range=-79..120
    tests:
      - commands:
          - '/interface wireless connect-list set [ find comment=existing ] interface=wlan1 signal-range=-50..120 wireless-protocol=802.11'
        argument_spec:
          config:
            - { comment: existing, interface: wlan1, signal_range: '-50..120', wireless_protocol: 802.11 }
          state: merged
