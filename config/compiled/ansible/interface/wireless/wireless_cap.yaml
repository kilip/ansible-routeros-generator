name: wireless_cap
package: interface.wireless
template: '@ansible/module/module.py.twig'
module_name: kilip.routeros.ros_wireless_cap
export_command: '/interface wireless cap export'
resource_class_name: WirelessCapResource
documentation:
  module: ros_wireless_cap
  version_added: 1.0.0
  author: 'Anthonius Munthi (@kilip)'
  short_description: 'Wireless CAP Setting'
  description:
    - 'This module manages the Wireless CAP setting of Mikrotik RouterOS network devices.'
  supports:
    - export-verbose-mode
  options:
    state:
      choices:
        - present
        - reset
      default: present
      description: 'Set state for this module'
    config:
      type: dict
      suboptions:
        bridge:
          type: str
          description: 'Bridge to which interfaces should be added when local forwarding mode is used'
        caps_man_addresses:
          type: list
          description: 'List of Manager IP addresses that CAP will attempt to contact during discovery'
        caps_man_certificate_common_names:
          type: list
          description: 'List of Manager certificate CommonNames that CAP will connect to, if empty - CAP does not check Manager certificate CommonName'
        caps_man_names:
          type: list
          description: 'An ordered list of CAPs Manager names that the CAP will connect to, if empty - CAP does not check Manager name'
        certificate:
          type: str
          description: 'Certificate to use for authenticating'
        comment:
          type: str
          description: 'Short note for wireless_cap resource'
        disabled:
          type: bool
          default: 'False'
          description: 'Set wireless_cap resource disability'
        discovery_interfaces:
          type: list
          description: 'List of interfaces over which CAP should attempt to discover Manager'
        enabled:
          type: bool
          default: 'False'
          description: 'Disable or enable CAP feature'
        interfaces:
          type: list
          description: 'List of wireless interfaces to be controlled by Manager'
        static_virtual:
          type: bool
          default: 'False'
          description: 'CAP will create Static Virtual Interfaces instead of Dynamic and will try to reuse the same interface on reconnect to CAPsMAN if the MAC address will be the same. Note if two or more interfaces will have the same MAC address the assignment from the CAPsMAN could be random between those interfaces.'
examples:
  - title: 'Change Wireless CAP Setting'
    name: 'Configure Wireless CAP'
    argument_spec:
      config:
        interfaces:
          - wlan1
          - wlan2
      state: present
    before: |
      /interface wireless cap
      set bridge=none caps-man-addresses="" caps-man-certificate-common-names="" caps-man-names="" certificate=none enabled=no lock-to-caps-man=no static-virtual=no
    after: |
      /interface wireless cap
      set interfaces=wlan1,wlan2
    commands:
      - '/interface wireless cap set interfaces=wlan1,wlan2'
resource:
  name: wireless_cap
  package: interface.wireless
  command: '/interface wireless cap'
  config_type: setting
  keys:
    - name
  supports:
    - export-verbose-mode
  argument_spec:
    states:
      type: str
      choices:
        - present
        - reset
      default: present
    config:
      type: dict
      options:
        bridge:
          type: str
        caps_man_addresses:
          type: list
        caps_man_certificate_common_names:
          type: list
        caps_man_names:
          type: list
        certificate:
          type: str
        comment:
          type: str
        disabled:
          type: bool
          default: 'False'
        discovery_interfaces:
          type: list
        enabled:
          type: bool
          default: 'False'
        interfaces:
          type: list
        static_virtual:
          type: bool
          default: 'False'
        lock_to_caps_man:
          type: str
