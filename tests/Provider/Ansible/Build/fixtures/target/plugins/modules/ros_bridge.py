#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2020 Anthonius Munthi
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Ansible RouterOS Module Generator
#     and manual changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://github.com/kilip/routeros-generator
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function
__metaclass__ = type


DOCUMENTATION = """
module: ros_vlan
version_added: 1.0.0
author: Anthonius Munthi (@kilip)
short_description: VLAN Resource Module
description:
  - This module manages the vlan configuration of Mikrotik RouterOS network devices.
options:
  state:
    choices:
      - merged
      - replaced
      - overridden
      - deleted
    default: merged
    description: Set state for this module
  config:
    type: list
    elements: dict
    suboptions:
      arp:
        type: str
        choices:
          - disabled
          - enabled
          - proxy-arp
          - reply-only
        default: enabled
        description: Address Resolution Protocol mode
      interface:
        type: str
        description: Name of physical interface on top of which VLAN will work
      l2mtu:
        type: int
        description: Layer2 MTU. For VLANS this value is not configurable. L(Read more&gt;&gt;, https://wiki.mikrotik.com/wiki/Maximum_Transmission_Unit_on_RouterBoards)
      mtu:
        type: int
        default: 1500
        description: Layer3 Maximum transmission unit
      name:
        type: str
        required: True
        description: Interface name
      use_service_tag:
        type: bool
        description: 802.1ad compatible Service Tag
      vlan_id:
        type: int
        default: 1
        description: Virtual LAN identifier or tag that is used to distinguish VLANs. Must be equal for all computers that belong to the same VLAN.

"""

EXAMPLES = """
# Using merged state
#
# before state:
# [admin@MikroTik] > /interface vlan export 
# /interface vlan
# add arp=reply-only interface=br-trunk name=vlan-100 vlan-id=100
#
- name: Merge configuration with device configuration
  kilip.routeros.ros_vlan:
    config:
      - name: vlan-100
        interface: br-trunk
        vlan_id: 100
        comment: new comment
      - name: vlan-200
        interface: br-trunk
        vlan_id: 200
        comment: new comment
    state: merged
    
#
# after state:
# [admin@MikroTik] > /interface vlan export 
# # RouterOS Output
# #
# /interface vlan
# add arp=enabled comment="new comment" name=vlan-100
# add comment="new comment" interface=br-trunk name=vlan-200 vlan-id=200
#
#
# Using replaced state
#
# before state:
# [admin@MikroTik] > /interface vlan export 
# /interface vlan
# add arp=reply-only interface=br-trunk name=vlan-100 vlan-id=100
#
- name: Replace device configuration
  kilip.routeros.ros_vlan:
    config:
      - name: vlan-100
        interface: br-trunk
        vlan_id: 100
        comment: new comment
    state: replaced
    
#
# after state:
# [admin@MikroTik] > /interface vlan export 
# # RouterOS Output
# #
# /interface vlan
# add arp=enabled comment="new comment" name=vlan-100
#
#
# Using overridden state
#
# before state:
# [admin@MikroTik] > /interface vlan export 
# /interface vlan
# add arp=reply-only interface=br-trunk name=vlan-100 vlan-id=100
#
- name: Override device configuration
  kilip.routeros.ros_vlan:
    config:
      - name: vlan-new
        interface: br-trunk
        vlan_id: 100
        comment: new comment
    state: overridden
    
#
# after state:
# [admin@MikroTik] > /interface vlan export 
# # RouterOS Output
# #
# /interface vlan
# add comment="new comment" interface=br-trunk name=vlan-new vlan-id=100
#
#
# Using deleted state
#
# before state:
# [admin@MikroTik] > /interface vlan export 
# /interface vlan
# add arp=reply-only interface=br-trunk name=vlan-100 vlan-id=100
#
- name: Delete VLAN Interface
  kilip.routeros.ros_vlan:
    config:
      - name: vlan-100
        interface: br-trunk
        vlan_id: 100
    state: deleted
    
#
# after state:
# [admin@MikroTik] > /interface vlan export 
# # RouterOS Output
# #
# /interface vlan
#
#
"""

from ansible.module_utils.basic import AnsibleModule
from ..module_utils.resources.interface.vlan import VlanResource
from ..module_utils.config.config import Config


def main():
    module = AnsibleModule(argument_spec=BridgeResource.argument_spec)
    result = Config(module, BridgeResource).execute_module()
    return module.exit_json(**result)


if __name__ == "__main__":
    main()
